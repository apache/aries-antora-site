Title: ReleasingAries

<a name="ReleasingAries-HowtodoanAriesRelease"></a>
# How to do an Aries Release

There are three types of Aries release:

 1. Releasing a single Aries bundle (or group of bundles)
 1. Releasing a distribution - a group of bundles that work together
 1. Releasing the samples

The outline process is the same in all three cases, further on down this page there are details about how the
Apache release process works and how to get set up to run it, read those sections first if this is 
your first release. If you are already familiar with the Apache process just use the high level descriptions in the
next few paragraphs to perform releases.


## Releasing a single bundle or group of bundles.

### What to release? Make a list.
The Apache release process will not release any bundle that has dependencies on -SNAPSHOTS. If, for example,
a release of the blueprint API bundle is required the first step is to find and release any of
its -SNAPSHOT dependencies. Because Aries bundles are quite interdependent (see [here](ModuleDependencies) 
for an idea
of how the modules relate to each other, it may be necessary to release quite a large number of bundles. So,
step one is to make a list. 
<p>To help with this, there is a file called aries_release_versions.txt in the top level
aries directory - this contains a list of all the Aries modules and their current release versions. The file
can be recreated (if necessary)
using the perl script list_bundles_in_aries.pl, checked into SVN under the scripts directory. The text file
is used for later steps in the release process, so by the end of the process it will have been updated to have
a complete list
of all Aries modules and their most recent version numbers after the release.</p>


### How to deal with JIRA
Before actually doing any releasing work through the list of bundles and understand what defects have been fixed
(add more about JIRA versions here)

### What version will be released?
For each bundle on the list check how its package versions have changed since the last release.
Based on this, use the versioning policy to determine the version of the bundle that should be released.

### Then, for each bundle
  * Deploy a SNAPSHOT to the maven snapshot repository (mvn deploy)
  * Build each module and run RAT checks
  * Create the release artifacts (mvn release prepare)
  * Upload release artifacts to a staging repository (mvn release perform)

### Complete the process
Once the bundles are in the staging repository, start a vote on the release. After 72 hours close the vote. To complete
the release process it is necessary to copy the new bundles to the dist dir and update table on the web pages.

## Releasing a distribution


## Releasing the samples.







To create a release you will need to create the release artifacts and move
then to various places (ultimately the Maven central repository). The Maven
commands and general outline of the process looks like this:

![rel](AriesRelease.png)

The picture assumes that you are releasing from a branch rather than from
trunk. The full maven commands are not shown - the intention is just to
give an indication of which maven commands you will need to use to create
assets in different places.

Performing a release is described in detail [here](http://apache.org/dev/publishing-maven-artifacts.html.html)
. This document It covers all the steps listed above so on these pages we
will only add things which are specific to the Apache Aries release. Note:
the document has not been release and this link will need to be updated
when it has.

There are a few steps to the process:

 1. Discussion of the release and its content on the aries-dev mailing list.
 1. Creating and storing GPG keys
 1. Setting up your environment
 1. JIRA preparation
 1. Checking the release version of the bundle
 1. Checking release artifacts on your local system
 1. Creating a snapshot release 
 1. Releasing to a staging repository (uses mvn release:prepare and mvn
release:perform)
 1. Running a vote
 1. Promoting the release artifacts to the Apache release repository
 1. Making the release artifacts available from the Aries web pages
 1. What to do when people find problems with the release artifacts
 1. JIRA tasks

The best current documentation for releases is [here](http://apache.org/dev/publishing-maven-artifacts.html)
 - but this isn't released yet. It covers all the steps listed above so on
these pages we will only add things which are specific to the Apache Aries
release.


<a name="ReleasingAries-Discussionofthereleaseandit'scontentontheAriesmailinglist"></a>
### Discussion of the release and its content on the Aries mailing list
Before starting off the release process it is essential to gain concensus
on the aries-dev list that this is the right time for a release and to
agree its content. Allow at least a week for this discussion. 


<a name="ReleasingAries-CreatingandstoringGPGkeys"></a>
### Creating and storing GPG keys
For Aries your GPG key will need to be in this file:
https://svn.apache.org/repos/asf/aries/KEYS (follow the
instructions in the file) and checkin

<a name="ReleasingAries-Settingupyourenvironment"></a>
### Setting up your environment

Follow the general instructions linked to above. 

<a name="ReleasingAries-Creatingabranchtoreleasefrom"></a>
### Creating a branch to release from
The recommendation is to avoid this unless you absolutely have to. 


    svn copy https://svn.apache.org/repos/asf/aries/trunk \

    https://svn.apache.org/repos/asf/aries/branches/0.X-RCx \
  
      -m "Creating a release branch of /aries/trunk."


Where '0.X' is the number of the release.

Checkout the new branch, for example, for the 0.2-incubating  release:


    svn co https://svn.apache.org/repos/asf/aries/branches/0.2-RCx aries-0.2-candidate


*IMPORTANT* If you are using a branch to release you *must* edit the top
level pom.xml for each module to change the SCM references to point to the
branch and not to trunk. For example:


    <connection>scm:svn:http://svn.apache.org/repos/asf/aries/branches/0.2-RCx/parent</connection>
       
    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/aries/branches/0.2-RCx/parent</developerConnection>
       
    <url>scm:svn:http://svn.apache.org/repos/asf/aries/branches/0.2-RCx/parent</url>


The consequence of forgetting this is that the commands that create the
release (mvn release:prepare, mvn release:perform) will declare SUCCESS but
will not create a staging repository and will add stuff to the snapshot
repository :-/.

After taking the branch, change the pom versions in trunk to, say,
0.3-incubating or whatever you want to call the next development version.

<a name="ReleasingAries-Checkingbundleversion"></a>
### Checking which version of the bundle to release
If the Maven version of the bundle ends -SNAPSHOT then some change has been made which may require a release.
To get a summary of the changes, use svn to compare with the most recently released tag, 
for example:


     svn diff https://svn.apache.org/repos/asf/aries/tags/testsupport-0.3/  https://svn.apache.org/repos/asf/aries/trunk/testsupport/ --summarize


In general, if no Java files have changed there is nothing to release (??? check this).

<a name="ReleasingAries-Checkingreleaseartifacts"></a>
### Checking release artifacts
Delete everything under ...org/apache/aries in your local
Maven repo. For linux/Mac users you will find this under ~/.m2/repository/.

Check that the code builds using the usual [sequence](buildingaries.html)
 of commands, but add the following arguments to the 'mvn install' command:


    mvn install -Papache-release -DcreateChecksum=true


This should build and install release artifacts in your local repo. 

Check the [0.1 release](https://repository.apache.org/content/repositories/releases/org/apache/aries/parent/0.1-incubating/)
 to understand what files should be created.

To perform legal checks, in each subproject, run:

    mvn rat:check -fn


This will run through the project and its sub projects generating a file
called rat.txt in each target directory.
The 'fn' means it will carry on even if it find a failure. To inspect the
failures, use:

    find . -name rat.txt | xargs grep \!\?\?


This will pick out the failing file names. Some of the files that rat fails
do not require an Apache license, eg MANIFEST.MF, but any *.java or *.js
file does need one. As an alternative you can use 'mvn -Prat install'.

<a name="ReleasingAries-Creatingasnapshotrelease"></a>
### Creating a snapshot release
This is important to do when releasing from trunk as other bundles may want
to continue to depend on the -SNAPSHOT version while the release is voted through.

### JIRA preparation
  * After initial release discussion on the mailing list you should have a list of JIRA issues that are required in the release. If not, the default assumption is 'everything that has been fixed since the last release'.
  * Make sure that there is a JIRA component that matches the name of the release, if not, create one.
  * Check through defects, make sure that anything that is included in the release has been closed. If there are open issues move them to the next release.


<a name="ReleasingAries-Creatingtherelease"></a>
### Creating the release

<a name="ReleasingAries-Creatingthereleaseartifactsinastagingrepository"></a>
##### Creating the release artifacts in a staging repository

Aries is released as a set of modules, not all the modules in Aries are
part of the release. Some modules depend on other modules. The release is
created by releasing each module separately and in a specific order. It is
also desirable to maintain the same IP address for the entire process (the
staging repository is associated with your IP address, changing it results
in the creation of a second staging repository).

Short summary: Use a wired ether net connection and allow about 4 hours for
the next few steps.

From the top level directory in your branch run:

    mvn clean


Then, change directory to 'parent'. It is necessary to release parent first
because everything else depends on it. Run the following commands:


    mvn install -Papache-release
    mvn release:prepare -Papache-release
    mvn release:perform -Papache-release


*Note* The prepare step will make some assumptions about the version of the
development stream that is left after the release has been made. When
releasing from a branch it may not be a good idea to accept the default for
this, it will very likely conflict with the development version in use in
trunk.

The install command is required to make sure that you have a copy of the
parent in your local repository - it's required for releasing the
eba-maven-plugin.

This _should _ start to put release artifacts into an Apache [staging repository ](https://repository.apache.org/index.html#view-repositories;staging.html). You will need to log in to see it.
If nothing appears in a staging repo you should stop here and work out why
:-). If you have made a mistake it's quite easy to revert. The release
commands make and commit changes to the project's pom.xml files and they
create a tag in SVN. To revert the changes you will need to revert the
pom.xml files and delete the tag from svn.

If you are in Europe the mvn release:prepare command almost always fails at
the last step, with a message like:


    [ERROR]
     BUILD FAILURE
    [INFO]
     ------------------------------------------------------------------------
    [INFO]
     Unable to tag SCM
    Provider message:
    The svn tag command failed.
    Command output:
    svn: No such revision 936951

This is due to the SVN mirroring in place between Europe and the master in
the US. When you make a commit, it isn't immediately available in Europe to
svn up to. Just wait 10 secs and repeat the mvn release:prepare command for
it to restart where it left off.


The next step is to release the eba-maven-plugin.

    cd ../eba/maven-plugin
    mvn versions:update-parent
    mvn versions:use-releases
    svn commit -m "updated to latest releases"
    mvn release:prepare -Papache-release
    mvn release:perform -Papache-release


Then for each project, in the order given below:

    testsupport
    util
    proxy
    quiesce
    blueprint 
    jndi
    transaction
    web
    application
    jmx
    jpa
    samples *See Note 1 below*

Run the following commands:

    mvn versions:update-parent   !Update parent to latest available
    mvn versions:use-releases *See Note 3 below*
    svn commit -m "updated to latest releases"
    rm pom.xml.versionsBackup
    mvn release:prepare -Papache-release -DpreparationGoals="clean install"
    *See Note 2 below*
    mvn release:perform -Papache-release


  * Note 1: when doing mvn versions:* actions in samples, you must also
manually change the version properties that are coded as properties in the top level
pom.xml. The only '-SNAPSHOT' you should have left in samples/pom.xml is
the version element for the module itself.
  * Note 2: -DpreparationGoals="clean install"	is needed for all modules
that have sub modules with dependencies between them, in practice this is
most modules.
  * Note 3: These two commands should only make changes to the top level pom.xml. However, this relies on people having 
understood that all the modules' dependencies go in the top level pom. If they haven't it's better 
to fix the poms before releasing.


<a name="ReleasingAries-Closingthestagingrepository"></a>
##### Closing the staging repository
After checking that the staging repository contains the artifacts that you
expect you should close the staging repository. This will make it available
so that people can check the release.

<a name="ReleasingAries-Runningthevote(s)"></a>
### Running the vote.


After all the modules are present in the staging repository you will need
to close the repository so that reviewers can access the modules. At this
point you should write two notes to the dev@aries.apache.org mailing list.

 * Subject \[VOTE\]
 Apache Aries (Incubating) version 0.X-incubating release candidate 02

The the source archive files should be explicitly called out by release
manager in any release vote. From an Apache legal standpoint, this is what
the project is "releasing" and what the community should be voting on. In
this [sample note](devlistvote.txt)
, there is a link to each modules' source*.zip file.


 * Subject \[DISCUSS\]
 Apache Aries (Incubating) version 0.X-incubating release candidate 0X

The content should just indicate that the note starts a thread to discuss
the Aries 0.X-incubating release.


After 72 hours, if no problems have been found in the release artifacts,
the aries-dev vote can be summarised and closed. Note that at least three
+1 votes from Aries IPMC members are required. 

After closing the vote on the aries-dev list, the second vote (on the
general@) can be started. Here is a [sample note](generallistvote.txt)
, the subject of the note is \[VOTE\]Approval to release Apache Aries
(Incubating) version 0.X-incubating


After another 72 hours, assuming there are no objections, this vote can
also be summarised and closed.

<a name="ReleasingAries-Promotingthereleaseartifacts"></a>
### Promoting the release artifacts
From the [Nexus pages](https://repository.apache.org/index.html#stagingRepositories)
, select the staging repository and select 'release' from the top menu.
This moves the release artifacts into an Apache releases repository, from
there they will be automatically moved to the Maven repository.

<a name="ReleasingAries-MakingthereleaseartifactsavailablefromtheArieswebpages."></a>
### Making the release artifacts available from the Aries web pages. 
Anything that is to be downloaded must be put in
/www/www.apache.org/dist/aries on minotaur. Don't forget to changes the file permissions to '664' so that other 
members of the group can access them. The distributions are
archived here /www/archive.apache.org/dist/aries.

First, delete the previous distribution from the distribution directory.
Download the release artifacts using a script like [this](release-0.2)
. Next, update the Aries Downloads pages to refer to the new artifacts.

### Tidying up tasks
  * Move trunk to a new level, useful *ix commands:
    * find . -name "pom.xml" -exec sed -ie "s#0.3-SNAPSHOT#0.4-SNAPSHOT#g" {} \;
    * find . -name pom.xmle | xargs -I {} rm {} <br/>
   or use a fancy editor.
  * Get the compliance tests run
  * Release notes
  * Release the component in JIRA (manage components), check the JIRA release notes.


<a name="ReleasingAries-Whattodowhenpeoplefindproblemswiththerelease"></a>
### What to do when people find problems with the release
 * Cancel the vote \[CANCELLED\] \[VOTE\]
 * Clean up, fix and re-release.
The good news here is that it isn't necessarily essential to re-release
every module. 


<a name="ReleasingAries-Cleaningup,fixingandre-releasing"></a>
### Cleaning up, fixing and re-releasing


The release process makes changes to project poms and adds a tag in svn.
The first step is to revert the changes to the poms in the problem modules. Hopefully (see Note 3 above)
it will only be necessary to revert the top level module pom. If you have to revert other poms in the 
module this works on *ix:

Determine which revision you want to go back to (eg XXXXX)

    svn up -r XXXXXX
    find . -name pom.xml | xargs -I {} mv {} {}_old
    svn up
    find . -name pom.xml | xargs -I {} mv {}_old {}
    svn status #Check what you have changed!
    svn commit -m "reverting release changes"


Next - delete the tag relating to the module from SVN

Finally - delete the folder from the staging repository (Right-click over the folder and select delete)

Make the fixes that you need to in the project, commit them and work
through the release process again. 

In some cases you may also want to merge from trunk into the release
branch. The syntax to do this is:

    svn merge -c ZZZZZZ https://svn.apache.org/repos/asf/aries/trunk

Where ZZZZZZ is the revision associated with the fix.
Note that you will be creating a new staging repository. The commands are
repeated here for convenience:


    mvn versions:update-parent
    mvn versions:use-releases
    svn commit -m "<version> RC<#>: updated to latest releases"
    mvn release:prepare -Papache-release -DpreparationGoals="clean install"
    mvn release:perform -Papache-release























