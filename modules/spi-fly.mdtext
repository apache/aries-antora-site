Title: SPI Fly

#SPI-Fly#

This page describes the SPI Fly component.
The SPI Fly component is aimed at providing general support for the JRE SPI
mechanism (including the usage of META-INF/services) in OSGi.

The code can be found in
http://svn.apache.org/repos/asf/incubator/aries/trunk/spi-fly however, the implementation is 
currently not yet finished. 

Currently the implementation does the following:

Providers:

* It only considers provider bundles that have the following Manifest (opt-in)
header: **SPI-Provider = ***
* For every new bundle being installed that has the opt-in header, it
checks the META-INF/services directory for any files. If found it registers
a service in the Service Registry for each implementation found with the
following property
 *spi.provider.url = <the URL to the associated META-INF/services file>*

Consumers:

* It only considers consumer bundles that have the following Manifest (opt-in) header:
**SPI-Consumer = ***
* When found, every call to java.util.ServiceLoader.load() will be modified automatically 
to have the ThreadContextClassLoader set to have visibility of the right bundles.

##How to use##
There are currently two ways to use the SPI-Fly component. If you have an OSGi 
4.3 compliant framework that supports WeavingHooks you can use the dynamic weaving bundle. 

If you have an pre-4.3 OSGi framework or don't want to use bytecode weaving at runtime you 
can use the static weaving approach.

##Dynamic use##
Install and start the <tt>org.apache.aries.spifly.dynamic.bundle</tt> into the system. This bundle 
has a dependency on <tt>org.objectweb.asm</tt> version 3.2 or newer.

<pre>osgi> ss    
Framework is launched.    
id	State       Bundle
0	ACTIVE      org.eclipse.osgi_3.7.0.v20110304
1	ACTIVE      org.objectweb.asm_3.2.0.v200909071300
2	ACTIVE      org.apache.aries.spifly.dynamic.bundle_0.4.0.SNAPSHOT</pre>

##Static use##
For static use, you need to modify the client bundle before installing it into the system. 
The modification changes the byte code around java.util.ServiceLoader.load() calls in the 
bundle and inserts calls to set the correct ThreadContextClassLoader around it.
Provider bundles are still handles dynamically.

##Example##